<?xml version="1.0"?>
<doc>
<assembly>
<name>
tdg.logging
</name>
</assembly>
<members>
<member name="T:tdg.logging.Enumerations.EventTypesEnum">
	<summary>
 Identifies the TYPE of Event being sent to Log
 </summary>
	<remarks></remarks>
</member><member name="T:tdg.logging.Enumerations.EventTimeFormatEnum">
	<summary>
 Enumeration of the possible time formats used in log entries
 </summary>
	<remarks></remarks>
</member><member name="T:tdg.logging.Enumerations.LogFileTypes">
	<summary>
 Supported Log File Types.  Each Instance can be only one Type at a time.
 </summary>
	<remarks></remarks>
</member><member name="P:tdg.logging.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:tdg.logging.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:tdg.logging.My.Resources.Resources.SyntaxException">
	<summary>
  Looks up a localized string similar to [{$EventTime}]
     EventType   = {$EventType}
     Sender      = {$Sender}
     Message     = {$Message}

.
</summary>
</member><member name="P:tdg.logging.My.Resources.Resources.SyntaxNormal">
	<summary>
  Looks up a localized string similar to [{$EventTime}]
     EventType   = {$EventType}
     Sender      = {$Sender}
     Message     = {$Message}
     ExMessage   = {$ExceptionMessage}
     ExType      = {$ExceptionType}
     Method      = {$Method}
     Assembly    = {$AssemblyName}
     Version     = {$Version}
     Publisher   = {$Publisher}
     StackTrace  = {$StackTrace}
     EventGuid   = {$EventGuid}
.
</summary>
</member><member name="P:tdg.logging.My.Resources.Resources.SyntaxParameterList">
	<summary>
  Looks up a localized string similar to {$EventTime}
{$EventType}
{$EventGuid}
{$Sender}
{$Message}
{$ExceptionMessage}
{$ExceptionType}
{$Method}
{$AssemblyName}
{$Version}
{$Publisher}
{$StackTrace}.
</summary>
</member><member name="T:tdg.logging.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:tdg.logging.SystemEventLog.#ctor(tdg.logging.Enumerations.LogFileTypes,System.String,System.String)">
	<summary>
 Creates a new instance of this Class using the specified LogFileType;
 ** Note:  Do not use USER_CSV
 </summary>
	<param name="enLogFileType"></param>
	<param name="sLogFileBaseName"></param>
	<param name="sLogFileDirectoryPath"></param>
	<remarks></remarks>
</member><member name="E:tdg.logging.SystemEventLog.LoggingMessage">
	<summary>
 Used to convey informational messages generated by this Class
 </summary>
	<param name="Type"></param>
	<param name="Message"></param>
	<remarks></remarks>
</member><member name="E:tdg.logging.SystemEventLog.QueueHandlerStatusChange">
	<summary>
 Indicates changes in the status of the Logging Queues
 </summary>
	<param name="enStatus"></param>
	<remarks></remarks>
</member><member name="E:tdg.logging.SystemEventLog.LoggingEcho">
	<summary>
 Echos-back an instance of LoggingEventArgs representing the most recently enqueued logging information
 </summary>
	<param name="ea"></param>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.EnableRaisingEvents">
	<summary>
 Specifies whether the high speed data log will raise its events.  Default is false to reduce overhead.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.EnableLoggingEcho">
	<summary>
 Enable or disable raising the LoggingEcho Event.  False by default to reduce overhead.  Enable this if, for example,
 a main Window is tracking logging events happening outside of its own scope (threads, etc).
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.ForceDequeueInterval">
	<summary>
 Logging entries are held in a memory queue, and chunks from the queue are periodically written to disk.  This controls
 the frequency of those disk writes.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.LogFileBaseName">
	<summary>
 Base file name (without path or extension) of the emitted log file
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.LogFileDirectoryPath">
	<summary>
 Directory to which the emitted log file will be written. 
 Defaults to the application's current directory.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.MaxLogFileRetention">
	<summary>
 Specifies the maximum number of local database log files which will be retained.
 Default value = 5
 </summary>
</member><member name="P:tdg.logging.SystemEventLog.MaxLogFileSize">
	<summary>
 Specifies the maximum size (in bytes) of the emitted log file. When the log file reaches this size, it is renamed and retained.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.MaxQueueLength">
	<summary>
 The maximum nummber of events that can be backlogged in the queues before mandatory disk-write occurrs.
 Throttle this value downward if memory issues arise.  Throttle upward (with CAUTION) if performance issues 
 arise.
 </summary>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.QueueLength">
	<summary>
 Returns the total number of events that have been passed to this Class instance for logging
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.ShouldQuoteUserCsv">
	<summary>
 When using log file type USER_CSV, determines if column contents should be enclosed in quotes.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.SuppressLoggingErrors">
	<summary>
 If true, errors created by this Class will be swallowed.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.SyntaxOfTextLog">
	<summary>
 Literal string with replaceable variables which dictates the syntax of entries in the emitted text log.
 Example:  Syntax = "Event happened at {$EventTime}; Message = {$Message}.
 In this example, {$EventTime} will be replaced by the time of the logged event, and {$Message} will be replaced
 by the Message sent for logging.
 If this Property is nothing (null), the default syntax of this Class is used. Once it is set, the user's value
 is used until it is again cleared by the user.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.SyntaxParameterList">
	<summary>
 Lists the parameterized event properties
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.SystemEventLog.WriteMinimalistCsv">
	<summary>
 Reduces logging verbeage for high-data applications. Retains original CSV structure (all columns), but only writes
 those which are absolutely necessary.
 It is not recommended to change this property on-the-fly without waiting at least the ForceDequeueInterval
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.WriteEvent(System.String,System.String,tdg.logging.Enumerations.EventTypesEnum)">
	<summary>
 Write a message to the log file.
 Valid for:  XML; CSV; TXT
 </summary>
	<param name="Message"></param>
	<param name="Sender"></param>
	<param name="EventType"></param>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.WriteEvent(System.String[],System.String,tdg.logging.Enumerations.EventTypesEnum,System.String,System.Int32,System.String)">
	<summary>
 Log a message to this Class's target log. Assumes String.Format, Params as input. The MessageSyntax and Params values
 dicatate the syntax of the Message data that is written.
 Example Call:       Logger.WriteEvent("{0}|{1}|{2}", {"zero", "one", "two"}, Enumerations.EventTypesEnum.TRACE, "sender...", 10, " ")
 Resulting Message: "zero      |one        |two       "
 Valid for:  XML; CSV; TXT
 </summary>
</member><member name="M:tdg.logging.SystemEventLog.WriteEvent(System.Exception,System.String,System.String,System.String)">
	<summary>
 Log an exception to this Class's target log.
 Valid for:  XML; CSV; TXT
 </summary>
	<param name="Excp">System.Exception object to be logged</param>
	<param name="Message">Additional class-user supplied message</param>
	<param name="Sender">User-defined sending object name</param>
	<param name="Method">Typically the System.Reflection.Methodbase.GetCurrentMethod.Name name of the method sending the exception to be logged.</param>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.WriteEvent(System.Collections.Generic.List{System.String})">
	<summary>
 ONLY use this overload if the LogFileType is set to USER_CSV.  In that case, the listed items will be applied 
 from 0 to X under user-defined headers (specified at instantiation) from 0 to X
 Valid for:  USER_CSV
 </summary>
	<param name="MessageList"></param>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.WriteEvent(tdg.logging.LoggingEventArgs)">
	<summary>
 Primary event writer; causes launch of the queue handling thread; called by all other WriteEvent overloads.
 Valid for:  XML; CSV; TXT
 </summary>
	<param name="evt">Short event Class instance to write to disk. Note: EventTime Property is added by this method to the evt object when it is passed here, NOT when 
 the evt object is eventually written to disk by the queue handler.</param>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.ClearLoggingQueues">
	<summary>
 Immediately stop all logging operations; call this when the application must exit
 but the queues are still full
 </summary>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.Flush">
	<summary>
 Force all information in the logging queues to be written to disk immediately.  Should be called before changing the default text format, changing the log file name or directory, etc.
 </summary>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.LogCsv(System.String,tdg.logging.LoggingEventArgs[]@,tdg.logging.LoggingEventArgs[]@)">
	<summary>Log event class object to csv file</summary>
	<param name="LogFileFullPath"></param>
	<param name="arA"></param>
	<param name="arB"></param>
	<remarks>
 Thread Safety: The DequeueWorker thread engages SyncLock on SyncLockCsv before (1) maintaining the CSV log files and (2) running LogCsv
   Therefore:
    ~ multiple instances of this Class will use the same shared LogCsv method
       ! in *extreme* long-duration, high-frequency logging, this can lead to excessive memory usage as items to be logged are enqueued more quickly
         than this Class can consume them
    ~ multiple instances cannot concurrently log to disk
    ~ multiple instances should not encounter file-in-use conditions if using the same destination CSV file
 
 Iterating:
 ------------------------------------------
 '// This works; however, see _Notes [Note1]
If Not arA Is Nothing Then
  For Each evb As cEventBase In arA
      If Not evb Is Nothing Then
          For Each kvp As KeyValuePair(Of String, String) In GetDictionaryFromEvent(evb)
              With csv_Writer
                  .WriteField(kvp.Value)
              End With
         Next
         csv_Writer.NextRecord()
         evb.Dispose()
     End If
   Next
End If
------------------------------------------
</remarks>
</member><member name="M:tdg.logging.SystemEventLog.LogTxtCustom(System.String,tdg.logging.LoggingEventArgs[],tdg.logging.LoggingEventArgs[])">
	<summary>
 Same as LogTxt, except that the user must have supplied this Class's Syntax property, 
 thus providing a custom syntax
 </summary>
	<param name="LogFileFullPath"></param>
	<param name="arA"></param>
	<param name="arB"></param>
	<remarks></remarks>
</member><member name="M:tdg.logging.SystemEventLog.LogUserCsv(System.String,tdg.logging.LoggingEventArgs[]@,tdg.logging.LoggingEventArgs[]@)">
	<summary>Log event class object to csv file</summary>
	<param name="LogFileFullPath"></param>
	<param name="arA"></param>
	<param name="arB"></param>
	<remarks>
 Thread Safety: The DequeueWorker thread engages SyncLock on SyncLockCsv before (1) maintaining the CSV log files and (2) running LogCsv
   Therefore:
    ~ multiple instances of this Class will use the same shared LogCsv method
       ! in *extreme* long-duration, high-frequency logging, this can lead to excessive memory usage as items to be logged are enqueued more quickly
         than this Class can consume them
    ~ multiple instances cannot concurrently log to disk
    ~ multiple instances should not encounter file-in-use conditions if using the same destination CSV file
 
 Iterating:
 ------------------------------------------
 '// This works; however, see _Notes [Note1]
If Not arA Is Nothing Then
  For Each evb As cEventBase In arA
      If Not evb Is Nothing Then
          For Each kvp As KeyValuePair(Of String, String) In GetDictionaryFromEvent(evb)
              With csv_Writer
                  .WriteField(kvp.Value)
              End With
         Next
         csv_Writer.NextRecord()
         evb.Dispose()
     End If
   Next
End If
------------------------------------------
</remarks>
</member><member name="P:tdg.logging.SystemEventLog.ExceptionCount">
	<summary>
 Indicates the number of exceptions generated internally by this Class
 during the current session.  Resets to 0 @ runtime.  Useful if 
 SuppressLoggingErrors = True.  If this count exceeds 100, and if EnableRaisingEvents is
 set to False, a WARNING type event will be raised whenever an additional Exception
 is generated.
 </summary>
</member><member name="M:tdg.logging.ccBlockingQueue.#ctor(System.Collections.ICollection)">
	<summary>
 Create new BlockingQueue.
 </summary>
	<param name="col">The System.Collections.ICollection to copy elements from</param>
</member><member name="M:tdg.logging.ccBlockingQueue.#ctor(System.Int32,System.Single)">
	<summary>
 Create new BlockingQueue.
 </summary>
	<param name="capacity">The initial number of elements that the queue can contain</param>
	<param name="growFactor">The factor by which the capacity of the queue is expanded. The current capacity
 is multiplied by this number when additional space is required.</param>
</member><member name="M:tdg.logging.ccBlockingQueue.#ctor(System.Int32)">
	<summary>
 Create new BlockingQueue.
 </summary>
	<param name="capacity">The initial number of elements that the queue can contain</param>
</member><member name="M:tdg.logging.ccBlockingQueue.#ctor">
	<summary>
 Create new BlockingQueue.
 </summary>
</member><member name="M:tdg.logging.ccBlockingQueue.Finalize">
	<summary>
 BlockingQueue Destructor (Close queue, resume any waiting thread).
 </summary>
</member><member name="M:tdg.logging.ccBlockingQueue.Clear">
	<summary>
 Remove all objects from the Queue.
 </summary>
</member><member name="M:tdg.logging.ccBlockingQueue.Close">
	<summary>
 Remove all objects from the Queue, resume all dequeue threads.
 </summary>
</member><member name="M:tdg.logging.ccBlockingQueue.DequeueAll(System.Int32)">
	<summary>
 Returns array of all items found in the queue at the time that this method is called.
 </summary>
	<param name="timeout">Timeout in milliseconds</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:tdg.logging.ccBlockingQueue.Enqueue(System.Object)">
	<summary>
 Adds an object to the end of the Queue.
 </summary>
	<param name="obj">Object to put in queue</param>
</member><member name="M:tdg.logging.ccBlockingQueue.Open">
	<summary>
 Open Queue.
 </summary>
</member><member name="P:tdg.logging.ccBlockingQueue.Closed">
	<summary>
 Gets flag indicating if queue has been closed.
 </summary>
</member><member name="T:tdg.logging.ccBlockingQueue">
	<summary>
 Same as Queue except Dequeue function blocks until there is an object to return.
 Note: This class does not need to be synchronized
 Original:   http://www.nullskull.com/articles/20060414.asp
 </summary>
</member><member name="P:tdg.logging.LoggingEventArgs.ID">
	<summary>
 Unique identifier; used only in database operations
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.EventTime">
	<summary>
 Time at which this event was sent for logging, NOT the time
 at which it was actually logged.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.Sender">
	<summary>
 User-defined 'name' of the Thread, Object, etc which 
 sent this event to be logged.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.Message">
	<summary>
 User-defined string message
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.MessageList">
	<summary>
 Used only in the high speed logging function.  Allows the user to log a list of messages to the high speed log
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.AssemblyName">
	<summary>
 Name of the currently-executing assembly.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.ExceptionMessage">
	<summary>
 Message from the Exception property of this Class instance
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.Method">
	<summary>
 Name of the specific Method which sent this event to be logged
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.StackTrace">
	<summary>
 Stacktrace of the Exception property of this Class instance
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.ExceptionType">
	<summary>
 String name of the Exception Type
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.Version">
	<summary>
 Version of the executing assembly
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:tdg.logging.LoggingEventArgs.Publisher">
	<summary>
 Publisher of the executing assembly
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member>
</members>
</doc>